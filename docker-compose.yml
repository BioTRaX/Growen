# NG-HEADER: Nombre de archivo: docker-compose.yml
# NG-HEADER: Ubicación: docker-compose.yml
# NG-HEADER: Descripción: Orquestación de servicios locales mediante Docker Compose.
# NG-HEADER: Lineamientos: Ver AGENTS.md
services:
  db:
    container_name: growen-postgres
    image: postgres:15
    environment:
      POSTGRES_USER: growen
      # IMPORTANT: Unified password (was previously GrowenBot=01 causing mismatch)
      POSTGRES_PASSWORD: "GrowenBot01"
      POSTGRES_DB: growen
    ports:
      # Nota: en Windows a veces hay un Postgres local en 5432. Mapeamos a 5433 para evitar colisiones.
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
  api:
    build:
      context: .
      dockerfile: infra/Dockerfile.api
    env_file: .env
    ports:
      - "8000:8000"
    depends_on:
      - db
    command: ["/app/infra/wait-for.sh", "db:5432", "uvicorn", "services.api:app", "--host", "0.0.0.0", "--port", "8000"]
  frontend:
    build:
      context: frontend
      dockerfile: ../infra/Dockerfile.frontend
    ports:
      - "5173:5173"
    depends_on:
      - api
  pdf_import:
    image: alpine:3.19
    command: ["sh","-c","sleep infinity"]
    profiles: ["optional"]
  playwright:
    image: alpine:3.19
    command: ["sh","-c","sleep infinity"]
    profiles: ["optional"]
  image_processing:
    image: alpine:3.19
    command: ["sh","-c","sleep infinity"]
    profiles: ["optional"]
  dramatiq:
    image: alpine:3.19
    command: ["sh","-c","sleep infinity"]
    profiles: ["optional"]
  scheduler:
    image: alpine:3.19
    command: ["sh","-c","sleep infinity"]
    profiles: ["optional"]
  tiendanube:
    image: alpine:3.19
    command: ["sh","-c","sleep infinity"]
    profiles: ["optional"]
  notifier:
    image: alpine:3.19
    command: ["sh","-c","sleep infinity"]
    profiles: ["optional"]
volumes:
  pgdata:

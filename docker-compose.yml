# NG-HEADER: Nombre de archivo: docker-compose.yml
# NG-HEADER: Ubicaci贸n: docker-compose.yml
# NG-HEADER: Descripci贸n: Orquestaci贸n de servicios locales mediante Docker Compose.
# NG-HEADER: Lineamientos: Ver AGENTS.md
services:
  db:
    container_name: growen-postgres
    image: growen/postgres:local
    build:
      context: .
      dockerfile: infra/Dockerfile.postgres
    environment:
      # Usar variables desde .env (no commitear credenciales)
      POSTGRES_USER: ${POSTGRES_USER:-growen}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-growen}
    ports:
      # Nota: en Windows a veces hay un Postgres local en 5432. Mapeamos a 5433 para evitar colisiones.
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
  api:
    build:
      context: .
      dockerfile: infra/Dockerfile.api
    env_file: .env
    # environment:
    #   # Si tu .env usa 127.0.0.1, dentro del contenedor debe usarse 'db:5432'.
    #   # Sugerido: define DB_URL en .env con host=DB_HOST y vars separadas para mayor seguridad.
    #   DB_URL: "postgresql+psycopg://<user>:<pass>@db:5432/<db>"
    ports:
      - "8000:8000"
    depends_on:
      - db
    command: ["/app/infra/wait-for.sh", "db:5432", "uvicorn", "services.api:app", "--host", "0.0.0.0", "--port", "8000"]
    restart: unless-stopped
  frontend:
    build:
      context: frontend
      dockerfile: ../infra/Dockerfile.frontend
    ports:
      - "5173:80"
    depends_on:
      - api
    restart: unless-stopped
  pdf_import:
    image: alpine:3.19
    command: ["sh","-c","sleep infinity"]
    profiles: ["optional"]
  playwright:
    image: alpine:3.19
    command: ["sh","-c","sleep infinity"]
    profiles: ["optional"]
  image_processing:
    image: alpine:3.19
    command: ["sh","-c","sleep infinity"]
    profiles: ["optional"]
  dramatiq:
    image: alpine:3.19
    command: ["sh","-c","sleep infinity"]
    profiles: ["optional"]
  scheduler:
    image: alpine:3.19
    command: ["sh","-c","sleep infinity"]
    profiles: ["optional"]
  tiendanube:
    image: alpine:3.19
    command: ["sh","-c","sleep infinity"]
    profiles: ["optional"]
  notifier:
    image: alpine:3.19
    command: ["sh","-c","sleep infinity"]
    profiles: ["optional"]
  mcp_products:
    build:
      context: .
      dockerfile: mcp_servers/products_server/Dockerfile
    container_name: growen-mcp-products
    depends_on:
      - api
    environment:
      # Futuro: TOKEN o variables de autenticaci贸n hacia API
      LOG_LEVEL: info
    ports:
      - "8100:8100"
    restart: unless-stopped
volumes:
  pgdata:
